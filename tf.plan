[0m[1maws_iam_policy.aws_load_balancer_controller: Refreshing state... [id=arn:aws:iam::051725806636:policy/AWSLoadBalancerControlleri-munna][0m

[1m[36mNote:[0m[1m Objects have changed outside of Terraform
[0m
Terraform detected the following changes made outside of Terraform since the
last "terraform apply" which may have affected this plan:

[1m  # aws_iam_policy.aws_load_balancer_controller[0m has been deleted
[0m  [31m-[0m[0m resource "aws_iam_policy" "aws_load_balancer_controller" {
      [31m-[0m[0m arn       = "arn:aws:iam::051725806636:policy/AWSLoadBalancerControlleri-munna" [90m-> null[0m[0m
        id        = "arn:aws:iam::051725806636:policy/AWSLoadBalancerControlleri-munna"
        name      = "AWSLoadBalancerControlleri-munna"
        [90m# (4 unchanged attributes hidden)[0m[0m
    }


Unless you have made equivalent changes to your configuration, or ignored the
relevant attributes using ignore_changes, the following plan may include
actions to undo or respond to these changes.
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # data.aws_iam_policy_document.aws_load_balancer_controller_assume_role_policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "aws_load_balancer_controller_assume_role_policy" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions = [
              [32m+[0m[0m "sts:AssumeRoleWithWebIdentity",
            ]
          [32m+[0m[0m effect  = "Allow"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "system:serviceaccount:kube-system:aws-load-balancer-controller",
                ]
              [32m+[0m[0m variable = (known after apply)
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "Federated"
            }
        }
    }

[1m  # data.tls_certificate.eks[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "eks" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # aws_iam_openid_connect_provider.eks[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "eks" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags_all        = (known after apply)
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # aws_iam_policy.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "aws_load_balancer_controller" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "AWSLoadBalancerControlleri-munna"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "iam:CreateServiceLinkedRole",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "iam:AWSServiceName" = "elasticloadbalancing.amazonaws.com"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:DescribeAccountAttributes",
                          [32m+[0m[0m "ec2:DescribeAddresses",
                          [32m+[0m[0m "ec2:DescribeAvailabilityZones",
                          [32m+[0m[0m "ec2:DescribeInternetGateways",
                          [32m+[0m[0m "ec2:DescribeVpcs",
                          [32m+[0m[0m "ec2:DescribeVpcPeeringConnections",
                          [32m+[0m[0m "ec2:DescribeSubnets",
                          [32m+[0m[0m "ec2:DescribeSecurityGroups",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeNetworkInterfaces",
                          [32m+[0m[0m "ec2:DescribeTags",
                          [32m+[0m[0m "ec2:GetCoipPoolUsage",
                          [32m+[0m[0m "ec2:DescribeCoipPools",
                          [32m+[0m[0m "elasticloadbalancing:DescribeLoadBalancers",
                          [32m+[0m[0m "elasticloadbalancing:DescribeLoadBalancerAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DescribeListeners",
                          [32m+[0m[0m "elasticloadbalancing:DescribeListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:DescribeSSLPolicies",
                          [32m+[0m[0m "elasticloadbalancing:DescribeRules",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetGroups",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetGroupAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetHealth",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTags",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "cognito-idp:DescribeUserPoolClient",
                          [32m+[0m[0m "acm:ListCertificates",
                          [32m+[0m[0m "acm:DescribeCertificate",
                          [32m+[0m[0m "iam:ListServerCertificates",
                          [32m+[0m[0m "iam:GetServerCertificate",
                          [32m+[0m[0m "waf-regional:GetWebACL",
                          [32m+[0m[0m "waf-regional:GetWebACLForResource",
                          [32m+[0m[0m "waf-regional:AssociateWebACL",
                          [32m+[0m[0m "waf-regional:DisassociateWebACL",
                          [32m+[0m[0m "wafv2:GetWebACL",
                          [32m+[0m[0m "wafv2:GetWebACLForResource",
                          [32m+[0m[0m "wafv2:AssociateWebACL",
                          [32m+[0m[0m "wafv2:DisassociateWebACL",
                          [32m+[0m[0m "shield:GetSubscriptionState",
                          [32m+[0m[0m "shield:DescribeProtection",
                          [32m+[0m[0m "shield:CreateProtection",
                          [32m+[0m[0m "shield:DeleteProtection",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:AuthorizeSecurityGroupIngress",
                          [32m+[0m[0m "ec2:RevokeSecurityGroupIngress",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:CreateSecurityGroup",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:CreateTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null         = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "ec2:CreateAction" = "CreateSecurityGroup"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "arn:aws:ec2:*:*:security-group/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:CreateTags",
                          [32m+[0m[0m "ec2:DeleteTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster"  = "true"
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "arn:aws:ec2:*:*:security-group/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:AuthorizeSecurityGroupIngress",
                          [32m+[0m[0m "ec2:RevokeSecurityGroupIngress",
                          [32m+[0m[0m "ec2:DeleteSecurityGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:CreateLoadBalancer",
                          [32m+[0m[0m "elasticloadbalancing:CreateTargetGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:CreateListener",
                          [32m+[0m[0m "elasticloadbalancing:DeleteListener",
                          [32m+[0m[0m "elasticloadbalancing:CreateRule",
                          [32m+[0m[0m "elasticloadbalancing:DeleteRule",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:AddTags",
                          [32m+[0m[0m "elasticloadbalancing:RemoveTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster"  = "true"
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:AddTags",
                          [32m+[0m[0m "elasticloadbalancing:RemoveTags",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:ModifyLoadBalancerAttributes",
                          [32m+[0m[0m "elasticloadbalancing:SetIpAddressType",
                          [32m+[0m[0m "elasticloadbalancing:SetSecurityGroups",
                          [32m+[0m[0m "elasticloadbalancing:SetSubnets",
                          [32m+[0m[0m "elasticloadbalancing:DeleteLoadBalancer",
                          [32m+[0m[0m "elasticloadbalancing:ModifyTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:ModifyTargetGroupAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DeleteTargetGroup",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:AddTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null         = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "elasticloadbalancing:CreateAction" = [
                                  [32m+[0m[0m "CreateTargetGroup",
                                  [32m+[0m[0m "CreateLoadBalancer",
                                ]
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:RegisterTargets",
                          [32m+[0m[0m "elasticloadbalancing:DeregisterTargets",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:SetWebAcl",
                          [32m+[0m[0m "elasticloadbalancing:ModifyListener",
                          [32m+[0m[0m "elasticloadbalancing:AddListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:RemoveListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:ModifyRule",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # aws_iam_policy.k8s-default-policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "k8s-default-policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "uat-munna-rnd-k8s-default-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:CreateNetworkInterface",
                          [32m+[0m[0m "ec2:CreateNetworkInterfacePermission",
                          [32m+[0m[0m "ec2:DeleteNetworkInterface",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeNetworkInterfaces",
                          [32m+[0m[0m "ec2:DetachNetworkInterface",
                          [32m+[0m[0m "ec2:DescribeSecurityGroups",
                          [32m+[0m[0m "ec2:DescribeSubnets",
                          [32m+[0m[0m "ec2:DescribeVpcs",
                          [32m+[0m[0m "ec2:ModifyNetworkInterfaceAttribute",
                          [32m+[0m[0m "iam:ListAttachedRolePolicies",
                          [32m+[0m[0m "eks:UpdateClusterVersion",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:CreateTags",
                          [32m+[0m[0m "ec2:DeleteTags",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ec2:*:*:vpc/*",
                          [32m+[0m[0m "arn:aws:ec2:*:*:subnet/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "route53:AssociateVPCWithHostedZone"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "logs:CreateLogGroup"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:DescribeLogStreams",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:logs:*:*:log-group:/aws/eks/*:*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "logs:PutLogEvents"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:logs:*:*:log-group:/aws/eks/*:*:*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "iam:CreateServiceLinkedRole"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "iam:AWSServiceName" = "eks.amazonaws.com"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:AssignPrivateIpAddresses",
                          [32m+[0m[0m "ec2:AttachNetworkInterface",
                          [32m+[0m[0m "ec2:CreateNetworkInterface",
                          [32m+[0m[0m "ec2:DeleteNetworkInterface",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeTags",
                          [32m+[0m[0m "ec2:DescribeNetworkInterfaces",
                          [32m+[0m[0m "ec2:DescribeInstanceTypes",
                          [32m+[0m[0m "ec2:DetachNetworkInterface",
                          [32m+[0m[0m "ec2:ModifyNetworkInterfaceAttribute",
                          [32m+[0m[0m "ec2:UnassignPrivateIpAddresses",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:CreateTags",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ec2:*:*:network-interface/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeRouteTables",
                          [32m+[0m[0m "ec2:DescribeSecurityGroups",
                          [32m+[0m[0m "ec2:DescribeSubnets",
                          [32m+[0m[0m "ec2:DescribeVolumes",
                          [32m+[0m[0m "ec2:DescribeVolumesModifications",
                          [32m+[0m[0m "ec2:DescribeVpcs",
                          [32m+[0m[0m "eks:DescribeCluster",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ecr:GetAuthorizationToken",
                          [32m+[0m[0m "ecr:BatchCheckLayerAvailability",
                          [32m+[0m[0m "ecr:GetDownloadUrlForLayer",
                          [32m+[0m[0m "ecr:GetRepositoryPolicy",
                          [32m+[0m[0m "ecr:DescribeRepositories",
                          [32m+[0m[0m "ecr:ListImages",
                          [32m+[0m[0m "ecr:DescribeImages",
                          [32m+[0m[0m "ecr:BatchGetImage",
                          [32m+[0m[0m "ecr:GetLifecyclePolicy",
                          [32m+[0m[0m "ecr:GetLifecyclePolicyPreview",
                          [32m+[0m[0m "ecr:ListTagsForResource",
                          [32m+[0m[0m "ecr:DescribeImageScanFindings",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ssm:DescribeAssociation",
                          [32m+[0m[0m "ssm:GetDeployablePatchSnapshotForInstance",
                          [32m+[0m[0m "ssm:GetDocument",
                          [32m+[0m[0m "ssm:DescribeDocument",
                          [32m+[0m[0m "ssm:GetManifest",
                          [32m+[0m[0m "ssm:GetParameters",
                          [32m+[0m[0m "ssm:ListAssociations",
                          [32m+[0m[0m "ssm:ListInstanceAssociations",
                          [32m+[0m[0m "ssm:PutInventory",
                          [32m+[0m[0m "ssm:PutComplianceItems",
                          [32m+[0m[0m "ssm:PutConfigurePackageResult",
                          [32m+[0m[0m "ssm:UpdateAssociationStatus",
                          [32m+[0m[0m "ssm:UpdateInstanceAssociationStatus",
                          [32m+[0m[0m "ssm:UpdateInstanceInformation",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ssmmessages:CreateControlChannel",
                          [32m+[0m[0m "ssmmessages:CreateDataChannel",
                          [32m+[0m[0m "ssmmessages:OpenControlChannel",
                          [32m+[0m[0m "ssmmessages:OpenDataChannel",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2messages:AcknowledgeMessage",
                          [32m+[0m[0m "ec2messages:DeleteMessage",
                          [32m+[0m[0m "ec2messages:FailMessage",
                          [32m+[0m[0m "ec2messages:GetEndpoint",
                          [32m+[0m[0m "ec2messages:GetMessages",
                          [32m+[0m[0m "ec2messages:SendReply",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "cloudwatch:PutMetricData",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:DescribeInstanceStatus",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ds:CreateComputer",
                          [32m+[0m[0m "ds:DescribeDirectories",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:DescribeLogGroups",
                          [32m+[0m[0m "logs:DescribeLogStreams",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "waf:*",
                          [32m+[0m[0m "waf-regional:*",
                          [32m+[0m[0m "wafv2:*",
                          [32m+[0m[0m "elasticloadbalancing:SetWebACL",
                          [32m+[0m[0m "apigateway:SetWebACL",
                          [32m+[0m[0m "appsync:SetWebACL",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "tag:GetResources",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # aws_iam_policy.k8s-dynamodb-policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "k8s-dynamodb-policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "uat-munna-rnd-k8s-dynamodb-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:BatchGetItem",
                          [32m+[0m[0m "dynamodb:BatchWriteItem",
                          [32m+[0m[0m "dynamodb:ConditionCheckItem",
                          [32m+[0m[0m "dynamodb:PutItem",
                          [32m+[0m[0m "dynamodb:DeleteItem",
                          [32m+[0m[0m "dynamodb:GetItem",
                          [32m+[0m[0m "dynamodb:Scan",
                          [32m+[0m[0m "dynamodb:ListTagsOfResource",
                          [32m+[0m[0m "dynamodb:Query",
                          [32m+[0m[0m "dynamodb:UpdateItem",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:dynamodb:ap-southeast-1:051725806636:table/uat-munna-rnd-*"
                      [32m+[0m[0m Sid      = "VisualEditor0"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:Scan",
                          [32m+[0m[0m "dynamodb:Query",
                          [32m+[0m[0m "dynamodb:DescribeStream",
                          [32m+[0m[0m "dynamodb:GetRecords",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:dynamodb:ap-southeast-1:051725806636:table/uat-munna-rnd-*/index/*",
                          [32m+[0m[0m "arn:aws:dynamodb:ap-southeast-1:051725806636:table/uat-munna-rnd-*/stream/*",
                        ]
                      [32m+[0m[0m Sid      = "VisualEditor1"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "dynamodb:ListTables",
                          [32m+[0m[0m "dynamodb:ListStreams",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                      [32m+[0m[0m Sid      = "VisualEditor2"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # aws_iam_policy.k8s-s3-policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "k8s-s3-policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "uat-munna-rnd-k8s-s3-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:GetBucketObjectLockConfiguration",
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:ListBucket",
                          [32m+[0m[0m "s3:DeleteObject",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::*/*",
                          [32m+[0m[0m "arn:aws:s3:::uat-munna-rnd-*",
                        ]
                      [32m+[0m[0m Sid      = "VisualEditor0"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "s3:ListAllMyBuckets"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                      [32m+[0m[0m Sid      = "VisualEditor1"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # aws_iam_role.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "aws_load_balancer_controller" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "aws-load-balancer-controller"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # aws_iam_role_policy_attachment.aws_load_balancer_controller_attach[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "aws_load_balancer_controller_attach" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "aws-load-balancer-controller"
    }

[1m  # null_resource.kubeconfig[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "kubeconfig" {
      [32m+[0m[0m id = (known after apply)
    }

[1m  # module.eks-cluster.data.tls_certificate.example[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "example" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.eks-cluster.aws_autoscaling_schedule.spot_nodegroup_scale_down[0][0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_schedule" "spot_nodegroup_scale_down" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m autoscaling_group_name = (known after apply)
      [32m+[0m[0m desired_capacity       = 0
      [32m+[0m[0m end_time               = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m max_size               = 0
      [32m+[0m[0m min_size               = 0
      [32m+[0m[0m recurrence             = "0 16 * * *"
      [32m+[0m[0m scheduled_action_name  = "uat-munna-rnd-spot_nodegroup_scale_down"
      [32m+[0m[0m start_time             = (known after apply)
      [32m+[0m[0m time_zone              = (known after apply)
    }

[1m  # module.eks-cluster.aws_autoscaling_schedule.spot_nodegroup_scale_down_midnight[0][0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_schedule" "spot_nodegroup_scale_down_midnight" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m autoscaling_group_name = (known after apply)
      [32m+[0m[0m desired_capacity       = 0
      [32m+[0m[0m end_time               = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m max_size               = 0
      [32m+[0m[0m min_size               = 0
      [32m+[0m[0m recurrence             = "0 20 * * *"
      [32m+[0m[0m scheduled_action_name  = "uat-munna-rnd-spot_nodegroup_scale_down"
      [32m+[0m[0m start_time             = (known after apply)
      [32m+[0m[0m time_zone              = (known after apply)
    }

[1m  # module.eks-cluster.aws_autoscaling_schedule.spot_nodegroup_scale_up[0][0m will be created
[0m  [32m+[0m[0m resource "aws_autoscaling_schedule" "spot_nodegroup_scale_up" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m autoscaling_group_name = (known after apply)
      [32m+[0m[0m desired_capacity       = 2
      [32m+[0m[0m end_time               = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m max_size               = 2
      [32m+[0m[0m min_size               = 2
      [32m+[0m[0m recurrence             = "0 3 * * *"
      [32m+[0m[0m scheduled_action_name  = "uat-munna-rnd-spot_nodegroup_scale_up"
      [32m+[0m[0m start_time             = (known after apply)
      [32m+[0m[0m time_zone              = (known after apply)
    }

[1m  # module.eks-cluster.aws_eks_cluster.eks[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "eks" {
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m certificate_authority     = (known after apply)
      [32m+[0m[0m cluster_id                = (known after apply)
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types = [
          [32m+[0m[0m "api",
          [32m+[0m[0m "audit",
        ]
      [32m+[0m[0m endpoint                  = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m identity                  = (known after apply)
      [32m+[0m[0m name                      = "uat-munna-rnd-eks-cluster"
      [32m+[0m[0m platform_version          = (known after apply)
      [32m+[0m[0m role_arn                  = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m tags_all                  = (known after apply)
      [32m+[0m[0m version                   = "1.23"

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = false
          [32m+[0m[0m public_access_cidrs       = (known after apply)
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = [
              [32m+[0m[0m "subnet-033e1d9428f91f483",
              [32m+[0m[0m "subnet-04ebd429464000948",
            ]
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks-cluster.aws_eks_node_group.spot_node_group[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "spot_node_group" {
      [32m+[0m[0m ami_type               = "BOTTLEROCKET_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "SPOT"
      [32m+[0m[0m cluster_name           = "uat-munna-rnd-eks-cluster"
      [32m+[0m[0m disk_size              = 100
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.medium",
          [32m+[0m[0m "t3a.medium",
        ]
      [32m+[0m[0m node_group_name        = "uat-munna-rnd-eks-spot-nodegroup"
      [32m+[0m[0m node_group_name_prefix = (known after apply)
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = [
          [32m+[0m[0m "subnet-033e1d9428f91f483",
          [32m+[0m[0m "subnet-04ebd429464000948",
        ]
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "uat-munna-rnd-eks-spot-worker"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "uat-munna-rnd-eks-spot-worker"
        }
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 2
          [32m+[0m[0m max_size     = 2
          [32m+[0m[0m min_size     = 2
        }

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable = 1
        }
    }

[1m  # module.eks-cluster.aws_iam_openid_connect_provider.example[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "example" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags_all        = (known after apply)
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks-cluster.aws_iam_role.eks-role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks-role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "uat-munna-rnd-eks-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks-cluster.aws_iam_role_policy_attachment.AmazonEKSClusterPolicy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "AmazonEKSClusterPolicy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = "uat-munna-rnd-eks-role"
    }

[1m  # module.eks-cluster.aws_iam_role_policy_attachment.AmazonEKSServicePolicy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "AmazonEKSServicePolicy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
      [32m+[0m[0m role       = "uat-munna-rnd-eks-role"
    }

[1m  # module.eks-cluster.aws_iam_role_policy_attachment.AmazonEKS_CNI_Policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "AmazonEKS_CNI_Policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = "uat-munna-rnd-eks-role"
    }

[1m  # module.eks-cluster.aws_security_group.eks-master[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "eks-master" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "uat-munna-rnd-eks-master"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Cost-Center"  = "munna"
          [32m+[0m[0m "Environment"  = "uat"
          [32m+[0m[0m "Name"         = "uat-munna-rnd-eks-cluster"
          [32m+[0m[0m "Owner"        = "SE"
          [32m+[0m[0m "Project"      = "munna-rnd"
          [32m+[0m[0m "ResourceType" = "EKS-cluster-resource"
          [32m+[0m[0m "Version"      = "0.0.1"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Cost-Center"  = "munna"
          [32m+[0m[0m "Environment"  = "uat"
          [32m+[0m[0m "Name"         = "uat-munna-rnd-eks-cluster"
          [32m+[0m[0m "Owner"        = "SE"
          [32m+[0m[0m "Project"      = "munna-rnd"
          [32m+[0m[0m "ResourceType" = "EKS-cluster-resource"
          [32m+[0m[0m "Version"      = "0.0.1"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0194d1b660005a311"
    }

[1m  # module.eks-cluster.aws_security_group_rule.eks-master-egress[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "eks-master-egress" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.eks-cluster.aws_security_group_rule.eks-master-self-vpc-ingress[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "eks-master-self-vpc-ingress" {
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks-cluster.aws_security_group_rule.mip-vpc-ingress[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "mip-vpc-ingress" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "10.144.160.0/20",
        ]
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks-iam.aws_iam_instance_profile.default[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_instance_profile" "default" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m create_date = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "uat-munna-rnd-worker"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m role        = "uat-munna-rnd-worker"
      [32m+[0m[0m tags_all    = (known after apply)
      [32m+[0m[0m unique_id   = (known after apply)
    }

[1m  # module.eks-iam.aws_iam_role.default[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "default" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = ""
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "uat-munna-rnd-worker"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks-iam.aws_iam_role_policy_attachment.default["AWSRoute53FullAccess"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "default" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonRoute53FullAccess"
      [32m+[0m[0m role       = "uat-munna-rnd-worker"
    }

[1m  # module.eks-iam.aws_iam_role_policy_attachment.default["AmazonDynamoDBAccess"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "default" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "uat-munna-rnd-worker"
    }

[1m  # module.eks-iam.aws_iam_role_policy_attachment.default["AmazonEC2FullAccess"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "default" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
      [32m+[0m[0m role       = "uat-munna-rnd-worker"
    }

[1m  # module.eks-iam.aws_iam_role_policy_attachment.default["AmazonS3Access"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "default" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "uat-munna-rnd-worker"
    }

[1m  # module.eks-iam.aws_iam_role_policy_attachment.default["AmazonSSMFullAccess"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "default" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
      [32m+[0m[0m role       = "uat-munna-rnd-worker"
    }

[1m  # module.eks-iam.aws_iam_role_policy_attachment.default["ECRReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "default" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "uat-munna-rnd-worker"
    }

[1m  # module.eks-iam.aws_iam_role_policy_attachment.default["EKSCNIPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "default" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = "uat-munna-rnd-worker"
    }

[1m  # module.eks-iam.aws_iam_role_policy_attachment.default["EKSDefaultPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "default" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "uat-munna-rnd-worker"
    }

[1m  # module.eks-iam.aws_iam_role_policy_attachment.default["EKSWorkerPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "default" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = "uat-munna-rnd-worker"
    }

[1m  # module.eks-iam.aws_iam_role_policy_attachment.default["SSMManagedInstanceCore"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "default" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      [32m+[0m[0m role       = "uat-munna-rnd-worker"
    }

[1mPlan:[0m 34 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m aws_load_balancer_controller_role_arn = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
